<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.turing.turing.dao.MemberMapper">
  <resultMap id="BaseResultMap" type="com.turing.turing.entity.Member">
    <id column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="phone_number" jdbcType="CHAR" property="phoneNumber" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="after_graduated" jdbcType="VARCHAR" property="afterGraduated" />
    <result column="major" jdbcType="VARCHAR" property="major" />
    <result column="member_direct" jdbcType="VARCHAR" property="memberDirect" />
    <result column="member_password" jdbcType="VARCHAR" property="memberPassword" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    member_id, member_name, phone_number, birthday, after_graduated, major, member_direct,
    member_password
  </sql>
  <sql id="Base_Column_List_Without_Password">
    member_id, member_name, phone_number, birthday, after_graduated, major, member_direct
  </sql>
  <select id="selectByExample" parameterType="com.turing.turing.entity.MemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <!--
  List<Member> selectByExampleWithoutPassword(MemberExample example)
  前台页面查询团队成员, 不查询密码
  -->
  <select id="selectByExampleWithoutPassword" parameterType="com.turing.turing.entity.MemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List_Without_Password" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from member
    where member_id = #{memberId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from member
    where member_id = #{memberId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.turing.turing.entity.MemberExample">
    delete from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.turing.turing.entity.Member">
    insert into member (member_id, member_name, phone_number, 
      birthday, after_graduated, major, 
      member_direct, member_password)
    values (#{memberId,jdbcType=INTEGER}, #{memberName,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=CHAR}, 
      #{birthday,jdbcType=DATE}, #{afterGraduated,jdbcType=VARCHAR}, #{major,jdbcType=VARCHAR}, 
      #{memberDirect,jdbcType=VARCHAR}, #{memberPassword,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.turing.turing.entity.Member">
    insert into member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        member_id,
      </if>
      <if test="memberName != null">
        member_name,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="afterGraduated != null">
        after_graduated,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="memberDirect != null">
        member_direct,
      </if>
      <if test="memberPassword != null">
        member_password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="memberName != null">
        #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=CHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="afterGraduated != null">
        #{afterGraduated,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        #{major,jdbcType=VARCHAR},
      </if>
      <if test="memberDirect != null">
        #{memberDirect,jdbcType=VARCHAR},
      </if>
      <if test="memberPassword != null">
        #{memberPassword,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.turing.turing.entity.MemberExample" resultType="java.lang.Long">
    select count(*) from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update member
    <set>
      <if test="record.memberId != null">
        member_id = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.memberName != null">
        member_name = #{record.memberName,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNumber != null">
        phone_number = #{record.phoneNumber,jdbcType=CHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=DATE},
      </if>
      <if test="record.afterGraduated != null">
        after_graduated = #{record.afterGraduated,jdbcType=VARCHAR},
      </if>
      <if test="record.major != null">
        major = #{record.major,jdbcType=VARCHAR},
      </if>
      <if test="record.memberDirect != null">
        member_direct = #{record.memberDirect,jdbcType=VARCHAR},
      </if>
      <if test="record.memberPassword != null">
        member_password = #{record.memberPassword,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update member
    set member_id = #{record.memberId,jdbcType=INTEGER},
      member_name = #{record.memberName,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=CHAR},
      birthday = #{record.birthday,jdbcType=DATE},
      after_graduated = #{record.afterGraduated,jdbcType=VARCHAR},
      major = #{record.major,jdbcType=VARCHAR},
      member_direct = #{record.memberDirect,jdbcType=VARCHAR},
      member_password = #{record.memberPassword,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.turing.turing.entity.Member">
    update member
    <set>
      <if test="memberName != null">
        member_name = #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=CHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="afterGraduated != null">
        after_graduated = #{afterGraduated,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        major = #{major,jdbcType=VARCHAR},
      </if>
      <if test="memberDirect != null">
        member_direct = #{memberDirect,jdbcType=VARCHAR},
      </if>
      <if test="memberPassword != null">
        member_password = #{memberPassword,jdbcType=VARCHAR},
      </if>
    </set>
    where member_id = #{memberId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.turing.turing.entity.Member">
    update member
    set member_name = #{memberName,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=CHAR},
      birthday = #{birthday,jdbcType=DATE},
      after_graduated = #{afterGraduated,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      member_direct = #{memberDirect,jdbcType=VARCHAR},
      member_password = #{memberPassword,jdbcType=VARCHAR}
    where member_id = #{memberId,jdbcType=INTEGER}
  </update>
</mapper>